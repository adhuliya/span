// Version = 0.0.1
syntax = "proto3";
package spir;

option go_package = "./spir";

// The EntityKind or K_EK type is used to represent the kind of an entity in the SPAN IR.
// It is an integer type in the range of 0 to 31 (5 bits)
// that can take on various values to indicate different kinds of entities.
enum K_EK {
	// Entity kinds which can be in an expression (4 bit values)
    NONE          = 0;
	VAR           = 1; // The function locals, static vars, and parameters.
	VAR_GLOBAL    = 2; // A global variable, function etc.
	VAR_TMP       = 3;
	VAR_SSA       = 4;
	VAR_PSEUDO    = 5; // To give names to, for e.g., memory allocations
	LIT_NUM       = 6; // A numeric literal
	LIT_NUM_IMM   = 7; // A numeric litreal with immediate value
	LIT_STR       = 8; // A string literal
	VALUE_TYPE    = 9; // A type, like int, float, record etc.
	FUNC          = 10;
	FUNC_VAR_ARGS = 11;
	CLASS         = 12; // A class type; for future use.
	LABEL         = 13; // In if-then-else statements
	ENT1          = 14; // Reserved for future use
	ENT2          = 15; // Reserved for future use

	// Entity kinds which cannot be in an expression (5 bit values)
	INSN  = 16;
	BB    = 17;
	CFG   = 18;
	SCOPE = 19;
	TU    = 20;
}

// All values must fit in 5 bits.
enum K_IK {
    INOP = 0;
    IBARRIER = 1;
    IASGN_SIMPLE = 2;
    IASGN_BOP = 3;
    IASGN_UOP = 4;
    IASGN_RHS_DEREF = 5;
    IASGN_LHS_DEREF = 6;
    IASGN_RHS_ARRAY = 7;
    IASGN_LHS_ARRAY = 8;
    IASGN_CALL = 9;
    IASGN_PHI = 10;

    ICALL = 11;
    IGOTO = 12;
    ICOND = 13; // IF-THEN-ELSE
    ILABEL = 14;

    IRETURN = 15;
}

// All values must fit in 5 bits.
enum K_XK {
	// Expression kinds that can be used in expressions
    NIL = 0; // Shows that there is no expression present
	VAL = 1; // A single value type: a constant, variable or function

	ADD = 2; // A binary addition expression
	SUB = 3; // A binary subtraction expression
	MUL = 4; // A binary multiplication expression
	DIV = 5; // A binary division expression
	MOD = 6; // A binary modulo expression

	AND  = 7;  // A binary AND expression
	OR   = 8;  // A binary OR expression
	XOR  = 9;  // A binary XOR expression
	SHL  = 10; // A binary shift left expression
	SHR  = 11; // A binary shift right expression
	SHRL = 12; // A binary shift right logical expression

	BIT_NOT = 13; // A unary bitwise NOT expression
	NEGATE  = 14; // A unary minus expression
	NOT     = 15; // A unary NOT expression

	DEREF  = 16; // A dereference expression
	ADDROF = 17; // An address expression

	SIZEOF  = 18; // A sizeof expression
	ALIGNOF = 19; // An alignof expression

	ARRAY_SUBSCRIPT   = 20; // An array subscript expression
	MEMBER_ACCESS     = 21; // A member access expression
	MEMBER_PTR_ACCESS = 22; // A member pointer access expression

	CALL   = 23; // A function call expression (all arguments may be stored separately)
	CALL_0 = 24; // A call with zero arguments
	CAST   = 25; // A cast expression

	EQ = 26;
	NE = 27;
	LT = 28;
	LE = 29;
}

// All values must fit in 5 bits.
enum K_VK {
    option allow_alias = true;
	VOID          = 0;
	CHAR          = 1;
	INT8          = 2;
	INT16         = 3;
	INT32         = 4;
	INT64         = 5;
	UINT8         = 6;
	UCHAR         = 6; // UINT8
	UINT16        = 7;
	UINT32        = 8;
	UINT64        = 9;
	N_BITS        = 10;
	N_UBITS       = 11;
	BOOL          = 12;
	FLOAT16       = 13;
	FLOAT32       = 14;
	FLOAT         = 14; // FLOAT32
	FLOAT64       = 15;
	DOUBLE        = 15; // FLOAT64
	PTR_TO_VOID   = 16;
	PTR_TO_PTR    = 17;
	PTR_TO_ARR    = 18; // A pointer to an array of elements
	PTR_TO_CHAR   = 19;
	PTR_TO_INT    = 20;
	PTR_TO_FLOAT  = 21;
	PTR_TO_RECORD = 22;
	PTR_TO_FUNC   = 23;
	ARR           = 24;
	UNION         = 25;
	STRUCT        = 26;
}

// All values must fit in 16 bits.
enum K_QK {
    option allow_alias = true;
    QNONE = 0;
    QCONST = 1;
    QCONST_DEST = 2;
    QFUNC_STATIC = 4;
    QGLOBAL_STATIC = 8;
    QVOLATILE = 16;
    QWEAK = 32;
    QTHREAD_LOCAL = 64;
    QNO_INIT = 128;
    QEXTERNAL = 256;
    QNO_DEF = 256;
}

// The location of an entity.
message BitSrcLoc {
	uint32 line = 1;
	uint32 col = 2;
}

// The Translation Unit
message BitTU {
    string name = 1;
    map<string, BitEntity> entities = 2; // name to entity mapping
    map<uint64, BitValueType> entityTypes = 3;
    repeated BitFunc functions = 4;
}

// Functions in a Translation unit.
// All global initializations are put in a special function:
//   void __span_global_initializations()
message BitFunc {
    string name = 1;
    uint64 id = 2;
    repeated BitInsn insns = 3;
    repeated uint64 locals = 4;
}

message BitValueType {
    K_VK kind = 1;
    optional K_QK qtype = 2;
    optional uint32 size = 3;
    optional uint32 align = 4;

    // Used for,
    //   1. Pointee of a pointer.
    //   2. Element of an array.
    //   3. Return type of a function.
    optional BitValueType subType = 5;

    // Used to name the record or other special types
    optional string valTypeName = 6;

    // Used for record and function types
    repeated string names = 7;
    repeated BitValueType types = 8;
}

message BitEntity {
    K_EK kind = 1;
    uint64 id = 2;
    // Store value if entity is a constant value.
    optional uint64 num = 3; // for a numeric literal (int, float, etc.)
    optional string str = 4; // for a string literal
	optional BitSrcLoc loc = 5;
}

message BitExpr {
    K_XK kind = 1;
    optional BitEntity opr1 = 2;
    optional BitEntity opr2 = 3;
    // More expressions, like call arguments.
    repeated BitEntity exprs = 4;
	optional BitSrcLoc loc = 5;
}

message BitInsn {
    K_IK kind = 1;
    optional BitExpr rhs = 2;
    optional BitExpr lhs = 3;
}
