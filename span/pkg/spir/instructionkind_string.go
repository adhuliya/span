// Code generated by "stringer -type=InstructionKind"; DO NOT EDIT.

package spir

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INSN_ASSIGN_SIMPLE-1]
	_ = x[INSN_ASSIGN_BINARY_OP-2]
	_ = x[INSN_ASSIGN_UNARY_OP-3]
	_ = x[INSN_ASSIGN_RHS_DEREF-4]
	_ = x[INSN_ASSIGN_LHS_DEREF-5]
	_ = x[INSN_ASSIGN_RHS_ARRAY_EXPR-6]
	_ = x[INSN_ASSIGN_LHS_ARRAY_EXPR-7]
	_ = x[INSN_ASSIGN_CALL-8]
	_ = x[INSN_ASSING_PHI-9]
	_ = x[INSN_CALL-10]
	_ = x[INSN_GOTO-11]
	_ = x[INSN_IF_THEN_ELSE-12]
	_ = x[INSN_LABEL-13]
	_ = x[INSN_RESERVE_14-14]
	_ = x[INSN_RESERVE_15-15]
	_ = x[INSN_RESERVE_16-16]
	_ = x[INSN_RESERVE_17-17]
	_ = x[INSN_RESERVE_18-18]
	_ = x[INSN_RESERVE_19-19]
	_ = x[INSN_RESERVE_20-20]
	_ = x[INSN_RESERVE_21-21]
	_ = x[INSN_RESERVE_22-22]
	_ = x[INSN_RESERVE_23-23]
	_ = x[INSN_RESERVE_24-24]
	_ = x[INSN_RESERVE_25-25]
	_ = x[INSN_RESERVE_26-26]
	_ = x[INSN_RESERVE_27-27]
	_ = x[INSN_RESERVE_28-28]
	_ = x[INSN_RESERVE_29-29]
	_ = x[INSN_RESERVE_30-30]
	_ = x[INSN_RESERVE_31-31]
}

const _InstructionKind_name = "INSN_ASSIGN_SIMPLEINSN_ASSIGN_BINARY_OPINSN_ASSIGN_UNARY_OPINSN_ASSIGN_RHS_DEREFINSN_ASSIGN_LHS_DEREFINSN_ASSIGN_RHS_ARRAY_EXPRINSN_ASSIGN_LHS_ARRAY_EXPRINSN_ASSIGN_CALLINSN_ASSING_PHIINSN_CALLINSN_GOTOINSN_IF_THEN_ELSEINSN_LABELINSN_RESERVE_14INSN_RESERVE_15INSN_RESERVE_16INSN_RESERVE_17INSN_RESERVE_18INSN_RESERVE_19INSN_RESERVE_20INSN_RESERVE_21INSN_RESERVE_22INSN_RESERVE_23INSN_RESERVE_24INSN_RESERVE_25INSN_RESERVE_26INSN_RESERVE_27INSN_RESERVE_28INSN_RESERVE_29INSN_RESERVE_30INSN_RESERVE_31"

var _InstructionKind_index = [...]uint16{0, 18, 39, 59, 80, 101, 127, 153, 169, 184, 193, 202, 219, 229, 244, 259, 274, 289, 304, 319, 334, 349, 364, 379, 394, 409, 424, 439, 454, 469, 484, 499}

func (i InstructionKind) String() string {
	i -= 1
	if i >= InstructionKind(len(_InstructionKind_index)-1) {
		return "InstructionKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _InstructionKind_name[_InstructionKind_index[i]:_InstructionKind_index[i+1]]
}
